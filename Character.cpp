#include "Character.h"
#include "dxlib.h"

CCharacter::CCharacter(){
	
	sStatus.uiLv = 1;

	// 経験値
	sStatus.uiEXP = 0;

	// 最大HP
	sStatus.uiMAXHP = 20;

	// HP
	sStatus.uiHP = 20;

	// 攻撃力
	sStatus.uiATK = 1;

	// 防御力
	sStatus.uiDEF = 1;

	// 最大CT
	sStatus.uiMAXCT = 100;

	// CT
	sStatus.uiCT = 0;

	// 最大TP
	sStatus.uiMAXTP = 3;

	// TP
	sStatus.uiTP = 1;

	for (int i = 0; i < FULLSKILL ; i++) {

		sSkill[i].stSkillName = "";
		sSkill[i].iPower = 0;
		sSkill[i].iConTP = 0;
		sSkill[i].iCost = 0;
		sSkill[i].iTypeA = A_NON;
		sSkill[i].iTypeB = B_NON;

	}


}

CCharacter::~CCharacter() {



}

bool CCharacter::SetCharaImage(const char dir[]) {

	// ハンドルIDが未設定状態であれば
	if (iGraphichandle == 0)
	{
		// ハンドルIDを設定
		iGraphichandle = LoadGraph(dir);

		// LoadGraphでエラーが起きたら
		if (iGraphichandle == -1)
		{
			OutputDebugString("Error: CCharacter::SetCharaImage LoadGraph()");
			return FALSE;
		}

		// エラーがなければ
		else
		{
			// グラフィックサイズを取得
			GetGraphSize(iGraphichandle, &iGraphicWidth, &iGraphicHeight);
			return TRUE;
		}



	}

	// ハンドルIDが設定されているのに呼び出されたら
	else
	{
		OutputDebugString("Error: CCharacter::SetCharaImage Handle ID already set.");
		return FALSE;
	}
}

// 描画先座標取得用関数 X
// x:ポジション番号 
int CCharacter::GetPositionX(int x)
{
	switch (x)
	{
	case 0:
		return PositionNum[0][0];
		break;
	case 1:
		return PositionNum[1][0];
		break;
	case 2:
		return PositionNum[2][0];
		break;
	case 3:
		return PositionNum[3][0];
		break;
	default:
		return -1;
		break;
	}

}

// 描画先座標取得用関数 Y
// y:ポジション番号
int CCharacter::GetPositionY(int y)
{
	switch (y)
	{
	case 0:
		return PositionNum[0][1];
		break;
	case 1:
		return PositionNum[1][1];
		break;
	case 2:
		return PositionNum[2][1];
		break;
	case 3:
		return PositionNum[3][1];
		break;
	default:
		return -1;
		break;
	}

}

bool CCharacter::DrawHPBar()
{
	// 戻り値用変数
	// TRUE:　エラーなし
	// FALSE: エラーあり
	bool blResult = FALSE;

	// 体力バー左上の座標
	// x座標 = キャラ画像の左上頂点のx座標
	// y座標 = キャラ画像の左上頂点のy座標 + キャラ画像の高さ + 補正値
	int ix1 = GetPositionX(iPartyNum);
	int iy1 = GetPositionY(iPartyNum) + iGraphicHeight;

	// 体力バー右下の座標
	// x座標 = ix1 + キャラ画像の横幅
	// y座標 = iy1 + 体力バーの縦幅
	int ix2 = ix1 + iGraphicWidth;
	int iy2 = iy1 + iHPBarHeight;

	// FOR DBG
	sStatus.uiHP = 15;

	// 万一、残存HPが最大HPを超えていたら最大HPに直す
	if (sStatus.uiHP > sStatus.uiMAXHP)
	{
		sStatus.uiHP = sStatus.uiMAXHP;
	}

	// 残存HPの割合 = 残存HP * 最大HP 
	double dRestHP = static_cast<double>(sStatus.uiHP) / static_cast<double>(sStatus.uiMAXHP);

	// 残存体力バーの色を計算
	// デフォルトは緑
	int iHPBarColor = 0x00FF00;

	// 1/4より上かつ半分以下なら黄色
	if (dRestHP <= 0.50 && 0.25 < dRestHP)
	{
		iHPBarColor = 0xFFFF00;
	}

	// 1/4以下なら赤
	else if (dRestHP <= 0.25)
	{
		iHPBarColor = 0xFF0000;
	}

	// 残存体力描画用のx座標= ix1 + (キャラ画像の横幅 * 残存HPの割合)
	int irestx2 = ix1 + int(iGraphicWidth * dRestHP);

	// 以下、描画を上から重ねていく

	// 体力減少部分を表示(暗い赤)
	if (DrawBox(ix1, iy1, ix2, iy2, 0x660000, TRUE) != 0)
	{
		blResult = FALSE;
	}
	else
	{
		blResult = TRUE;
	}

	// 残存体力を表示
	if (DrawBox(ix1, iy1, irestx2, iy2, iHPBarColor, TRUE) != 0)
	{
		blResult = FALSE;
	}
	else
	{
		blResult = TRUE;
	}

	// HPバーの枠を表示
	if (DrawBox(ix1, iy1, ix2, iy2, 0xFFFFFF, FALSE) != 0)
	{
		blResult = FALSE;
	}
	else
	{
		blResult = TRUE;
	}

	return blResult;
}

bool CCharacter::DrawTPBar()
{
	// 戻り値用変数
	// TRUE:　エラーなし
	// FALSE: エラーあり
	bool blResult = FALSE;

	// TPバー左上の座標
	// x座標 = キャラ画像の左上頂点のx座標
	// y座標 = キャラ画像の左上頂点のy座標 + キャラ画像の高さ + HPバーの縦幅
	int ix1 = GetPositionX(iPartyNum);
	int iy1 = GetPositionY(iPartyNum) + iGraphicHeight + iHPBarHeight;

	// 体力バー右下の座標
	// x座標 = ix1 + キャラ画像の横幅
	// y座標 = iy1 + 体力バーの縦幅
	int ix2 = ix1 + iGraphicWidth;
	int iy2 = iy1 + iTPBarHeight;

	// FOR DBG
	sStatus.uiTP = 2;

	// 万一、現在TPが最大TPを超えていたら最大TPに直す
	if (sStatus.uiTP > sStatus.uiMAXTP) {
		sStatus.uiTP = sStatus.uiMAXTP;
	}

	// TPバーの色を計算
	// デフォルトは緑
	int iTPBarColor = 0x00FF00;

	// TP量に応じて色を変更
	switch (sStatus.uiTP)
	{
	case 1:
		iTPBarColor = 0xFFFFFF;
		break;
	case 2:
		iTPBarColor = 0x88DDDD;
		break;
	case 3:
		iTPBarColor = 0x00FFFF;
		break;
	default:
		break;
	}
	double dRestTP = static_cast<double>(sStatus.uiTP) / static_cast<double>(sStatus.uiMAXTP);
	// 残存TP描画用のx座標= ix1 + (キャラ画像の横幅 * 残存HPの割合)
	int irestx2 = ix1 + int(iGraphicWidth * dRestTP);

	// 以下、描画を上から重ねていく

	// 体力減少部分を表示(暗い赤)
	if (DrawBox(ix1, iy1, ix2, iy2, 0x660000, TRUE) != 0)
	{
		blResult = FALSE;
	}
	else
	{
		blResult = TRUE;
	}

	// 残存TPを表示
	if (DrawBox(ix1, iy1, irestx2, iy2, iTPBarColor, TRUE) != 0)
	{
		blResult = FALSE;
	}
	else
	{
		blResult = TRUE;
	}

	// TPバーの枠を表示
	if (DrawBox(ix1, iy1, ix2, iy2, 0xFFFFFF, FALSE) != 0)
	{
		blResult = FALSE;
	}
	else
	{
		blResult = TRUE;
	}

	return blResult;
}


bool CCharacter::DrawCharaImage() {

	if (DrawGraph(GetPositionX(iPartyNum), GetPositionY(iPartyNum), iGraphichandle, TRUE) == -1) {

		OutputDebugString("Error: CCharacter::DrawCharaImage DrawGraph()");
		return FALSE;
	}

	else
	{
		return TRUE;
	}

}



